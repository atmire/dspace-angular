import { Injectable } from '@angular/core';
import {
  ItemDataService,
  Collection,
  DSpaceObject,
  followLink,
  Item,
  getFirstSucceededRemoteDataPayload,
  Vocabulary,
  VocabularyService,
} from '@dspace/core'
import { isNotEmpty } from '@dspace/utils';
import { Observable, of } from 'rxjs';
import { switchMap } from 'rxjs/operators';

/**
 * A service containing all the common logic for the components generated by the
 * {@link DsoEditMetadataValueFieldLoaderComponent}.
 */
@Injectable({
  providedIn: 'root',
})
export class DsoEditMetadataFieldService {

  constructor(
    protected itemService: ItemDataService,
    protected vocabularyService: VocabularyService,
  ) {
  }

  /**
   * Find the vocabulary of the given {@link mdField} for the given item.
   *
   * @param dso The item
   * @param mdField The metadata field
   */
  findDsoFieldVocabulary(dso: DSpaceObject, mdField: string): Observable<Vocabulary> {
    if (isNotEmpty(mdField)) {
      const owningCollection$: Observable<Collection> = this.itemService.findByHref(dso._links.self.href, true, true, followLink('owningCollection')).pipe(
        getFirstSucceededRemoteDataPayload(),
        switchMap((item: Item) => item.owningCollection),
        getFirstSucceededRemoteDataPayload(),
      );

      return owningCollection$.pipe(
        switchMap((c: Collection) => this.vocabularyService.getVocabularyByMetadataAndCollection(mdField, c.uuid).pipe(
          getFirstSucceededRemoteDataPayload(),
        )),
      );
    } else {
      return of(undefined);
    }
  }
}
